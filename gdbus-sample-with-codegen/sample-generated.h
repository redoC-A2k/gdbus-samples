/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __SAMPLE_GENERATED_H__
#define __SAMPLE_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.github.redoc.Sample */

#define TYPE_SAMPLE (sample_get_type ())
#define SAMPLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SAMPLE, Sample))
#define IS_SAMPLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SAMPLE))
#define SAMPLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SAMPLE, SampleIface))

struct _Sample;
typedef struct _Sample Sample;
typedef struct _SampleIface SampleIface;

struct _SampleIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_say_hello) (
    Sample *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_yourName);

};

GType sample_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *sample_interface_info (void);
guint sample_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void sample_complete_say_hello (
    Sample *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void sample_call_say_hello (
    Sample *proxy,
    const gchar *arg_yourName,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sample_call_say_hello_finish (
    Sample *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sample_call_say_hello_sync (
    Sample *proxy,
    const gchar *arg_yourName,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_SAMPLE_PROXY (sample_proxy_get_type ())
#define SAMPLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SAMPLE_PROXY, SampleProxy))
#define SAMPLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SAMPLE_PROXY, SampleProxyClass))
#define SAMPLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SAMPLE_PROXY, SampleProxyClass))
#define IS_SAMPLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SAMPLE_PROXY))
#define IS_SAMPLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SAMPLE_PROXY))

typedef struct _SampleProxy SampleProxy;
typedef struct _SampleProxyClass SampleProxyClass;
typedef struct _SampleProxyPrivate SampleProxyPrivate;

struct _SampleProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SampleProxyPrivate *priv;
};

struct _SampleProxyClass
{
  GDBusProxyClass parent_class;
};

GType sample_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SampleProxy, g_object_unref)
#endif

void sample_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Sample *sample_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Sample *sample_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void sample_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Sample *sample_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Sample *sample_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SAMPLE_SKELETON (sample_skeleton_get_type ())
#define SAMPLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SAMPLE_SKELETON, SampleSkeleton))
#define SAMPLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SAMPLE_SKELETON, SampleSkeletonClass))
#define SAMPLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SAMPLE_SKELETON, SampleSkeletonClass))
#define IS_SAMPLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SAMPLE_SKELETON))
#define IS_SAMPLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SAMPLE_SKELETON))

typedef struct _SampleSkeleton SampleSkeleton;
typedef struct _SampleSkeletonClass SampleSkeletonClass;
typedef struct _SampleSkeletonPrivate SampleSkeletonPrivate;

struct _SampleSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SampleSkeletonPrivate *priv;
};

struct _SampleSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType sample_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SampleSkeleton, g_object_unref)
#endif

Sample *sample_skeleton_new (void);


G_END_DECLS

#endif /* __SAMPLE_GENERATED_H__ */
